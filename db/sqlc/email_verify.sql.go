// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: email_verify.sql

package db

import (
	"context"
)

const createEmailVerify = `-- name: CreateEmailVerify :one
INSERT INTO email_verify (
  username,
  email,
  code
) VALUES (
  $1, $2, $3
) RETURNING id, username, email, code, is_verified, created_at, expired_at
`

type CreateEmailVerifyParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Code     string `json:"code"`
}

func (q *Queries) CreateEmailVerify(ctx context.Context, arg CreateEmailVerifyParams) (EmailVerify, error) {
	row := q.queryRow(ctx, q.createEmailVerifyStmt, createEmailVerify, arg.Username, arg.Email, arg.Code)
	var i EmailVerify
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Code,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getEmailVerify = `-- name: GetEmailVerify :one
SELECT id, username, email, code, is_verified, created_at, expired_at FROM email_verify WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmailVerify(ctx context.Context, id int64) (EmailVerify, error) {
	row := q.queryRow(ctx, q.getEmailVerifyStmt, getEmailVerify, id)
	var i EmailVerify
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Code,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const updateEmailVerify = `-- name: UpdateEmailVerify :one
UPDATE email_verify SET 
  is_verified = TRUE
WHERE id = $1
 and code = $2
 and expired_at > now()
 and is_verified = FALSE
RETURNING id, username, email, code, is_verified, created_at, expired_at
`

type UpdateEmailVerifyParams struct {
	ID   int64  `json:"id"`
	Code string `json:"code"`
}

func (q *Queries) UpdateEmailVerify(ctx context.Context, arg UpdateEmailVerifyParams) (EmailVerify, error) {
	row := q.queryRow(ctx, q.updateEmailVerifyStmt, updateEmailVerify, arg.ID, arg.Code)
	var i EmailVerify
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Code,
		&i.IsVerified,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
