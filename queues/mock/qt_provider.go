// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bank_go/queues (interfaces: TaskProvider)

// Package mockqt is a generated GoMock package.
package mockqt

import (
	context "context"
	reflect "reflect"

	queues "github.com/bank_go/queues"
	gomock "github.com/golang/mock/gomock"
	asynq "github.com/hibiken/asynq"
)

// MockTaskProvider is a mock of TaskProvider interface.
type MockTaskProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTaskProviderMockRecorder
}

// MockTaskProviderMockRecorder is the mock recorder for MockTaskProvider.
type MockTaskProviderMockRecorder struct {
	mock *MockTaskProvider
}

// NewMockTaskProvider creates a new mock instance.
func NewMockTaskProvider(ctrl *gomock.Controller) *MockTaskProvider {
	mock := &MockTaskProvider{ctrl: ctrl}
	mock.recorder = &MockTaskProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskProvider) EXPECT() *MockTaskProviderMockRecorder {
	return m.recorder
}

// ProvideEmailVerifyTask mocks base method.
func (m *MockTaskProvider) ProvideEmailVerifyTask(arg0 context.Context, arg1 *queues.EmailVerifyPayload, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ProvideEmailVerifyTask", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProvideEmailVerifyTask indicates an expected call of ProvideEmailVerifyTask.
func (mr *MockTaskProviderMockRecorder) ProvideEmailVerifyTask(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvideEmailVerifyTask", reflect.TypeOf((*MockTaskProvider)(nil).ProvideEmailVerifyTask), varargs...)
}
